<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>PageRank with Scores Displayed Above Nodes</title>
    <script type="text/javascript" src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
    <style>
        body {
            font-family: "Arial", sans-serif;
            background: #f0f2f5;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding-top: 20px;
        }
        #network {
            width: 900px;
            height: 700px;
            border: 1px solid lightgray;
            background: white;
            margin-top: 20px;
        }
        button {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 16px;
            border-radius: 8px;
            border: none;
            background-color: #4CAF50;
            color: white;
            cursor: pointer;
        }
        button:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>

<h2>PageRank with Scores Displayed Above Nodes</h2>
<button onclick="startAnimation()">Start Animation</button>
<div id="network"></div>

<script>
    // Dữ liệu
    const allNodes = [
        {id: 'A', label: 'A\n0.000', pagerank: 0.320, x: -200, y: 200},
        {id: 'B', label: 'B\n0.000', pagerank: 0.310, x: 0, y: 0},
        {id: 'C', label: 'C\n0.000', pagerank: 0.333, x: 200, y: 200},
        {id: 'D', label: 'D\n0.000', pagerank: 0.037, x: 0, y: -200},
    ];

    const allEdges = [
        {from: 'A', to: 'B'},
        {from: 'B', to: 'C'},
        {from: 'C', to: 'A'},
        {from: 'D', to: 'C'},
    ];

    const nodes = new vis.DataSet([]);
    const edges = new vis.DataSet([]);

    const container = document.getElementById('network');
    const data = { nodes: nodes, edges: edges };

    const options = {
        nodes: {
            shape: 'circle',
            size: 30,
            color: {
                background: 'skyblue',
                border: 'black'
            },
            font: {
                size: 18,
                color: 'black',
                multi: 'html'
            },
            physics: false, // tắt luôn physics để node đúng vị trí
            fixed: true
        },
        edges: {
            arrows: 'to',
            color: {color: 'black'},
            smooth: {
                type: "continuous",
                forceDirection: "horizontal",
                roundness: 0
            }
        },
    };

    const network = new vis.Network(container, data, options);

    function startAnimation() {
        nodes.clear();
        edges.clear();

        allNodes.forEach(node => {
            nodes.add({
                id: node.id,
                label: node.label,
                x: node.x,
                y: node.y,
                fixed: {x: true, y: true} // giữ cứng vị trí
            });
        });

        let edgeStep = 0;
        const delayPerEdge = 800;
        const animationDuration = 3000;

        function addNextEdge() {
            if (edgeStep < allEdges.length) {
                edges.add(allEdges[edgeStep]);
                edgeStep++;
                setTimeout(addNextEdge, delayPerEdge);
            } else {
                animateAllScores(animationDuration);
            }
        }

        setTimeout(addNextEdge, 1000);
    }

    function animateAllScores(duration) {
        const start = performance.now();

        function update(timestamp) {
            const elapsed = timestamp - start;
            const progress = Math.min(elapsed / duration, 1);

            allNodes.forEach(node => {
                const currentScore = (node.pagerank * progress).toFixed(3);
                nodes.update({id: node.id, label: `${node.id}\n${currentScore}`});
            });

            if (progress < 1) {
                requestAnimationFrame(update);
            }
        }

        requestAnimationFrame(update);
    }
</script>

</body>
</html>ody>
</html>
